name: Automated Trading Analysis

on:
  schedule:
    # Stock fetcher: Twice a week (Monday and Thursday) at 4:30 AM ET (9:30 AM UTC)
    - cron: '30 9 * * 1,4'
    # Combined analysis: Every weekday at 5:00 AM ET (10:00 AM UTC) 
    - cron: '0 10 * * 1-5'
    # Email sender: Every weekday at 5:30 AM ET (10:30 AM UTC)
    - cron: '30 10 * * 1-5'
  workflow_dispatch:  # Allow manual trigger

# Grant necessary permissions for the workflow
permissions:
  contents: write
  actions: read

jobs:
  # Job 1: Stock Data Refresh (Twice weekly)
  stock-refresh:
    runs-on: ubuntu-latest
    if: github.event.schedule == '30 9 * * 1,4' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Dynamic Stock Fetcher
      run: |
        echo "üîÑ Refreshing stock list (twice weekly schedule)..."
        python src/dynamic_stock_fetcher.py
    
    - name: Commit and Push Stock Data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add -A
        
        # Pull latest changes and handle conflicts
        git fetch origin main
        git merge origin/main --no-edit || echo "Merge conflicts handled"
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Stock data refresh - $(date '+%Y-%m-%d %H:%M UTC')"
          git push origin main
          echo "Pushed updated stock data"
        fi

  # Job 2: Combined Strategy Analysis (Daily)
  combined-analysis:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 10 * * 1-5' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Combined Strategy Analysis
      run: |
        echo "üìä Running combined strategy analysis at 5:00 AM ET..."
        python src/combined_strategy_analysis.py
    
    - name: Upload Analysis Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: combined-analysis-${{ github.run_number }}
        path: |
          output/combined_strategy_analysis.csv
          output/combined_strategy_analysis.png
          output/consensus_signals.csv
          output/momentum_dominant_signals.csv
          output/mean_reversion_dominant_signals.csv
          output/contrarian_signals.csv
        retention-days: 30

  # Job 3: Email Content Generation (Daily)
  email-generation:
    runs-on: ubuntu-latest
    if: github.event.schedule == '30 10 * * 1-5' || github.event_name == 'workflow_dispatch'
    needs: combined-analysis  # Wait for analysis to complete
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download Analysis Results
      uses: actions/download-artifact@v4
      with:
        name: combined-analysis-${{ github.run_number }}
        path: output/
    
    - name: Generate Email Content
      run: |
        echo "üìß Generating email with combined strategy dashboard at 5:30 AM ET..."
        python src/email_sender_gmail_embedded.py
    
    - name: Upload Email Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: email-content-${{ github.run_number }}
        path: |
          output/gmail_embedded_email.html
          output/gmail_embedded_email.txt
          output/gmail_embedded_subject.txt
        retention-days: 30
    
    - name: Email Content Summary
      run: |
        echo "üìß Combined Strategy Email Content Generated Successfully!"
        echo "üïê Scheduled time: 5:30 AM ET (10:30 AM UTC)"
        echo "üìä Analysis type: Combined Strategy (Mean Reversion + Momentum)"
        echo "üìÅ Files available as artifacts:"
        echo "   - gmail_embedded_email.html (1MB+ with embedded dashboard)"
        echo "   - gmail_embedded_email.txt (plain text summary)"
        echo "   - gmail_embedded_subject.txt (email subject)"
        echo ""
        echo "üéØ Strategy breakdown included in email:"
        echo "   - Consensus signals (both strategies agree)"
        echo "   - Momentum-driven signals"
        echo "   - Mean reversion signals"
        echo "   - Contrarian signals"
        echo "   - Confidence scoring and strategy validation"
        echo ""
        echo "üí° To send emails automatically, configure email service credentials" 